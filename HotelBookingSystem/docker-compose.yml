version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: hotel-booking-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=HotelBooking1234!
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./scripts:/docker-entrypoint-initdb.d
    networks:
      - hotel-booking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P HotelBooking1234! -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: src/ApiGateway/HotelBooking.ApiGateway/Dockerfile
    container_name: hotel-booking-api-gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=HotelBookingSystem;User Id=sa;Password=HotelBooking1234!;TrustServerCertificate=true;
      - ServiceUrls__BookingService=http://booking-service:80
      - ServiceUrls__AnalyticsService=http://analytics-service:80
    ports:
      - "5000:80"
    depends_on:
      sqlserver:
        condition: service_healthy
      booking-service:
        condition: service_started
      analytics-service:
        condition: service_started
    networks:
      - hotel-booking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Booking Service
  booking-service:
    build:
      context: .
      dockerfile: src/Services/HotelBooking.BookingService/Dockerfile
    container_name: hotel-booking-booking-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=HotelBookingSystem;User Id=sa;Password=HotelBooking1234!;TrustServerCertificate=true;
    ports:
      - "5003:80"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - hotel-booking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: src/Services/HotelBooking.AnalyticsService/Dockerfile
    container_name: hotel-booking-analytics-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=HotelBookingSystem;User Id=sa;Password=HotelBooking1234!;TrustServerCertificate=true;
    ports:
      - "5005:80"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - hotel-booking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./hotel-booking-frontend
      dockerfile: Dockerfile
    container_name: hotel-booking-frontend
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:5000
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - hotel-booking-network
    restart: unless-stopped

volumes:
  sqlserver_data:
    driver: local

networks:
  hotel-booking-network:
    driver: bridge
